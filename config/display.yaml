esphome:
  name: touch-panel
  platformio_options:
    lib_deps:
      - SPI
      - bodmer/TFT_eSPI@^2.5.43
      - paulstoffregen/XPT2046_Touchscreen@0.0.0-alpha+sha.26b691b2c8
    build_flags:
      - -D LOAD_FONT2
      - -D LOAD_FONT4
      - -D USER_SETUP_LOADED
      - -D ILI9488_DRIVER
      - -D TFT_WIDTH=480
      - -D TFT_HEIGHT=320
      - -D TFT_RGB_ORDER=TFT_BGR
      - -D TFT_MOSI=23
      - -D TFT_MISO=19
      - -D TFT_SCLK=18
      - -D TFT_CS=5
      - -D TFT_DC=2
      - -D TFT_RST=4
      - -D SPI_FREQUENCY=20000000
      - -D TFT_BL=32
      - -D TFT_BACKLIGHT_ON=1
  on_boot:
    priority: -100
    then:
      - lambda: |-
          auto *p = id(my_panel);
          p->add_item(new touch_panel::EnvItem("env", 0), /*col=*/1, /*row=*/0, /*colspan=*/1, /*rowspan=*/1, /*page=*/0);
          //p->add_paging_buttons({0,1}, {2,1}, 0);
          p->add_button("btn_makita", "Makita", 1, 1, 1, 1, 0);
          p->set_item_click("btn_makita", [](){ id(my_cool_switch_from_ha).toggle(); });

esp32:
  board: esp32dev
  framework:
    type: arduino

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Amsterdam

logger:
  level: WARN

api:

web_server:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# SPI zoals in je Arduino sketch
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

i2c:
  sda: 22
  scl: 21
  scan: true

sensor:
  # AHT20: temperature + humidity (I2C address is 0x38)
  - platform: aht10
    variant: AHT20
    address: 0x38
    update_interval: 30s
    temperature:
      id: panel_temp
      name: "Panel Temperature"
    humidity:
      id: panel_hum
      name: "Panel Humidity"

  # BMP280: barometric pressure (common I2C addresses: 0x76 or 0x77)
  - platform: bmp280_i2c
    address: 0x77           # change to 0x77 if scan shows that instead
    update_interval: 30s
    pressure:
      name: "Panel Pressure"


# Laad je externe component (lokale map)
external_components:
  - source:
      type: local
      path: ./components

# Instantieer je C++ component
touch_panel:
  id: my_panel
  tft_cs: 5
  touch_cs: 26
  touch_irq: 27

interval:
  - interval: 30s
    then:
      - lambda: |-
          id(my_panel).set_env(id(panel_temp).state, id(panel_hum).state);

output:
  - platform: gpio
    id: bl_pin
    pin:
      number: GPIO32      # your BL pin
#      inverted: true      # <â€” try this first
switch:
  - platform: output
    id: display_bl
    output: bl_pin
    restore_mode: ALWAYS_OFF
  - platform: homeassistant
    internal: False
    name: "Makita"
    id: my_cool_switch_from_ha
    entity_id: switch.0x70b3d52b601024b5
    on_turn_on:
      - lambda: |-
          id(my_panel).set_button_state("btn_makita", true);
    on_turn_off:
      - lambda: |-
          id(my_panel).set_button_state("btn_makita", false);

binary_sensor:
  - platform: gpio
    id: pir_motion
    name: "Radar Presence"
    pin:
      number: GPIO33
     # mode: INPUT_PULLUP       # or INPUT if the board has a pull-down resistor
     # inverted: false        # needed if output is active-low
    device_class: motion
    filters:
      - delayed_off: 1s
      - delayed_on: 250ms
    on_press:
      - switch.turn_on: display_bl
      - lambda: |-
          id(my_panel).sleep(false);
    on_release:
      - switch.turn_off: display_bl
      - lambda: |-
          id(my_panel).sleep(true);
